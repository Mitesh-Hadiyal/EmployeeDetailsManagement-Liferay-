package emp.crud.portlet.portlet;

import com.liferay.counter.kernel.service.CounterLocalService;
import com.liferay.counter.kernel.service.CounterLocalServiceUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;
import com.liferay.portal.kernel.util.Validator;
import empS.model.Employee;
import empS.service.EmployeeLocalService;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.Portlet;
import javax.portlet.PortletException;
import javax.portlet.ProcessAction;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

@Component(
    
   immediate = true,
   property = {"javax.portlet.init-param.add-process-action-success-action=false","com.liferay.portlet.display-category=category.sample", "com.liferay.portlet.header-portlet-css=/css/main.css", "com.liferay.portlet.instanceable=true", "javax.portlet.display-name=EmpCrud", "javax.portlet.init-param.template-path=/", "javax.portlet.init-param.view-template=/view.jsp", "javax.portlet.name=emp_crud_portlet_EmpCrudPortlet", "javax.portlet.resource-bundle=content.Language", "javax.portlet.security-role-ref=power-user,user"},
   service = {Portlet.class}
)
public class EmpCrudPortlet extends MVCPortlet {
	   
   @Reference
   CounterLocalService counterLocalService;
   @Reference
   EmployeeLocalService employeeLocalService;

   @ProcessAction(name = "employeeForm")
   public void addEmployee(ActionRequest actionRequest, ActionResponse actionResponse) 
   {
      String empIdString = actionRequest.getParameter("empId");
      System.out.println("Emp ID : " + empIdString);
      
      long empId;
      if(empIdString.equals(""))
      {
    	  empId = counterLocalService.increment();
    	  System.out.println("Employee ID : " + empId);    
      }else {
    	  empId = Long.parseLong(empIdString);  
      }
      
      String empName = actionRequest.getParameter("employeeName");
      System.out.println("Emp Name : " + empName);
      String surname = actionRequest.getParameter("surName");
      System.out.println("Surname : " + surname);
      String gender = actionRequest.getParameter("gdr");
      System.out.println("Gender : " + gender);
      String[] hobbies = actionRequest.getParameterValues("hobbiee");
      String hobbie = "";

      int i;
      for(i = 0; i < hobbies.length; ++i) {
         hobbie = hobbie + hobbies[i] + " ";
      }

      System.out.println("Hobbies : " + hobbie);
      
      int salary = Integer.parseInt(actionRequest.getParameter("slry"));
      System.out.println("Salary : " + salary);
      
      String email = actionRequest.getParameter("emails");
      System.out.println("Email : " + email);
      long phone = Long.parseLong(actionRequest.getParameter("mobile"));
      System.out.println("Phone No : " + phone);

      List employeeList = null;
      try {
    	  employeeList = this.employeeLocalService.getEmployees(-1, -1);
      } catch (NullPointerException var18) {
    	  System.out.println("Error Message : " + var18.getMessage());
      }
      
	  Iterator<Employee> it = employeeList.iterator();
	  int empExists=0;
	  if(Validator.isNotNull(employeeList))
	  {
		  while(it.hasNext())
		  {
			  if(it.next().getEmpId() == empId)
			  {
				  empExists++;
			  }
		  }
	  }
	  System.out.println("empExists : "+empExists);
	  if(empExists==1)
	  {
		  if(validateEmail(email,empId))
		  {
			  Employee employee = null;
			  try {
				  employee = this.employeeLocalService.getEmployee(empId);
			  } catch (PortalException e) {
				  e.printStackTrace();
			  }
			  employee.setEmpId(empId);
			  employee.setEmpName(empName);
			  employee.setSurname(surname);
			  employee.setGender(gender);
			  employee.setHobbies(hobbie);
			  employee.setSalary((long)salary);
			  employee.setEmail(email);
			  employee.setPhone(phone);
			  
			  employeeLocalService.updateEmployee(employee);        
			  System.out.println("Data Updated Successfully");		
	          actionRequest.setAttribute("Update", empId);

		  }
		  else {
			  System.out.println("Email Already Exists...!");
	          actionRequest.setAttribute("NotUpdated", empId);
		  }
	  }
	  else {
		  if(validateEmail(email,0))
		  {			  
			  Employee employee = this.employeeLocalService.createEmployee(empId);
			  employee.setEmpName(empName);
			  employee.setSurname(surname);
			  employee.setGender(gender);
			  employee.setHobbies(hobbie);
			  employee.setSalary((long)salary);
			  employee.setEmail(email);
			  employee.setPhone(phone);
			  this.employeeLocalService.addEmployee(employee);
			  System.out.println("Data added Successfully");
			  actionRequest.setAttribute("Success", empName);

		  }else {
              actionRequest.setAttribute("Failure", "fail");
			  System.out.println("Data Not Inserted...!");
		  }
	  }
      actionResponse.setRenderParameter("jspPage", "/view.jsp");
   }

   public void render(RenderRequest renderRequest, RenderResponse renderResponse) throws IOException, PortletException 
   {
      List<Employee> employeeList = this.employeeLocalService.getEmployees(-1, -1);
      renderRequest.setAttribute("employeeList", employeeList);
      renderRequest.setAttribute("namespace", renderResponse.getNamespace());
      System.out.println("Namespace : " + renderResponse.getNamespace());
      super.render(renderRequest, renderResponse);
   }

   @ProcessAction(name = "deleteEmployee")
   public void deleteEmployee(ActionRequest actionRequest, ActionResponse actionResponse) throws IOException, PortletException 
   {
      Long empId = Long.parseLong(actionRequest.getParameter("EmployeeId"));

      try {
         this.employeeLocalService.deleteEmployee(empId);
         System.out.println("Deleted Successfully...!");
         actionRequest.setAttribute("Deleted", "delete");

      } catch (PortalException var5) {
      }
      
      actionResponse.setRenderParameter("jspPage", "/view.jsp");
   }

   
   @ProcessAction(name = "updateEmployee")
   public void updateEmployee(ActionRequest actionRequest, ActionResponse actionResponse) 
   {
      long empId = Long.parseLong(actionRequest.getParameter("empId"));
      System.out.println("Emp Id : " + empId);
      String empName = actionRequest.getParameter("empName");
      System.out.println("Emp Name : " + empName);
      String surname = actionRequest.getParameter("surname");
      System.out.println("Surname : " + surname);
      String gender = actionRequest.getParameter("gender");
      System.out.println("Gender : " + gender);
      String[] hobbies = actionRequest.getParameterValues("hobbies");
      String hobbie = "";

      int i;
      for(i= 0; i< hobbies.length; ++i) {
         hobbie = hobbie + hobbies[i] + " ";
      }

      System.out.println("Hobbies : " + hobbie);
      int salary = Integer.parseInt(actionRequest.getParameter("salary"));
      System.out.println("Salary : " + salary);
      String email = actionRequest.getParameter("email");
      System.out.println("Email : " + email);
      long phone = Long.parseLong(actionRequest.getParameter("phone"));
      System.out.println("Phone No : " + phone);
      

      if(validateEmail(email,empId)) 
      {
    	  Employee employee = null;

          try {
             employee = this.employeeLocalService.getEmployee(empId);
          } catch (PortalException var19) {
             var19.printStackTrace();
          }

          employee.setEmpName(empName);
          employee.setSurname(surname);
          employee.setGender(gender);
          employee.setHobbies(hobbie);
          employee.setSalary((long)salary);
          employee.setEmail(email);
          employee.setPhone(phone);
          this.employeeLocalService.updateEmployee(employee);
          
          actionRequest.setAttribute("Update", empId);
          
//          System.out.println("validateEmail Working Properly");
          actionResponse.setRenderParameter("jspPage", "/view.jsp");
      }else {
          actionRequest.setAttribute("NotUpdated", empId);
    	  System.out.println("Email already exixts..!");
      }
   }
   
   
   public boolean validateEmail(String email, long id)
   {
	   List<Employee> employeeList = this.employeeLocalService.getEmployees(-1, -1);
	   Iterator<Employee> i = employeeList.iterator();
	   
	   int c=0;
	   while(i.hasNext())
	   {
		   if(i.next().getEmail().equals(email))
		   {
			   c++;
		   }
	   }
	   String emailSame="";
	   if(id != 0)
	   {		   
		   try 
		   {
			   Employee employee = employeeLocalService.getEmployee(id);
			   emailSame = employee.getEmail();
		   } 
		   catch (PortalException e) 
		   {
			   e.printStackTrace();
		   }
	   }
	   
	   if(c==0 || emailSame.equals(email))
	   {
		   return true;
	   }
	   else {
		   return false;
	   }
   }
}